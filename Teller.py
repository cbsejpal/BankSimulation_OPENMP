# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Teller', [dirname(__file__)])
        except ImportError:
            import _Teller
            return _Teller
        if fp is not None:
            try:
                _mod = imp.load_module('_Teller', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Teller = swig_import_helper()
    del swig_import_helper
else:
    import _Teller
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class teller(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, teller, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, teller, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Teller.new_teller()
        try: self.this.append(this)
        except: self.this = this
    def setTellerID(self, *args): return _Teller.teller_setTellerID(self, *args)
    def getTellerID(self): return _Teller.teller_getTellerID(self)
    def isAvailable(self): return _Teller.teller_isAvailable(self)
    def serveCustomer(self, *args): return _Teller.teller_serveCustomer(self, *args)
    def isOnline(self): return _Teller.teller_isOnline(self)
    def setStatus(self, *args): return _Teller.teller_setStatus(self, *args)
    def setAvailable(self, *args): return _Teller.teller_setAvailable(self, *args)
    def custServed(self): return _Teller.teller_custServed(self)
    def getCustomerServed(self): return _Teller.teller_getCustomerServed(self)
    __swig_destroy__ = _Teller.delete_teller
    __del__ = lambda self : None;
teller_swigregister = _Teller.teller_swigregister
teller_swigregister(teller)

class customer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, customer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, customer, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Teller.new_customer()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["t"] = _Teller.customer_t_set
    __swig_getmethods__["t"] = _Teller.customer_t_get
    if _newclass:t = _swig_property(_Teller.customer_t_get, _Teller.customer_t_set)
    def setCustomerNumber(self, *args): return _Teller.customer_setCustomerNumber(self, *args)
    def getCustomerNumber(self): return _Teller.customer_getCustomerNumber(self)
    def setArrivalTime(self, *args): return _Teller.customer_setArrivalTime(self, *args)
    def getArrivalTime(self): return _Teller.customer_getArrivalTime(self)
    def setTransactionTime(self, *args): return _Teller.customer_setTransactionTime(self, *args)
    def getTransactionTime(self): return _Teller.customer_getTransactionTime(self)
    def setWaitingTime(self, *args): return _Teller.customer_setWaitingTime(self, *args)
    def getWaitingTime(self): return _Teller.customer_getWaitingTime(self)
    __swig_destroy__ = _Teller.delete_customer
    __del__ = lambda self : None;
customer_swigregister = _Teller.customer_swigregister
customer_swigregister(customer)


def setTellerID(*args):
  return _Teller.setTellerID(*args)
setTellerID = _Teller.setTellerID

def getTellerID():
  return _Teller.getTellerID()
getTellerID = _Teller.getTellerID

def isAvailable():
  return _Teller.isAvailable()
isAvailable = _Teller.isAvailable

def serveCustomer(*args):
  return _Teller.serveCustomer(*args)
serveCustomer = _Teller.serveCustomer

def isOnline():
  return _Teller.isOnline()
isOnline = _Teller.isOnline

def setStatus(*args):
  return _Teller.setStatus(*args)
setStatus = _Teller.setStatus

def setAvailable(*args):
  return _Teller.setAvailable(*args)
setAvailable = _Teller.setAvailable

def custServed():
  return _Teller.custServed()
custServed = _Teller.custServed

def getCustomerServed():
  return _Teller.getCustomerServed()
getCustomerServed = _Teller.getCustomerServed
# This file is compatible with both classic and new-style classes.


